use 11am;
select * from employees;
select *,upper(left(first_name,2)) as first_letter,length(first_name) as len from employees;
select *, length(first_name) as len from employees;
select * from customers;
select *,length(country) as len from customers;
use 11am;
select * from employees;
select * from departments;
select * from employees employees as e inner join departments as d on  department_id,department_name, count(*) from employees group by department_id;
select department_name , count(*) from departments inner join employees on employees.department_id=departments.department_id 
group by departments.department_id, department_name order by department_name;
select * from employees;
select * from employees where first_name= binary upper (first_name);
select * from employees where first_name= upper (first_name);
select right(phone_number,4) from employees;
select length(phone_number) from employees;
select right(job_id,1) from employees;
select * from record;
select * from trainer;
select * from record inner join trainer on record.tid=trainer.tid;
select * from record cross join trainer on record.tid=trainer.tid order by trainer.tid;
use 11am;
select * from locations;
use 11am;
select * from record;
select *,char(name) from record;
select *,char(tid) from record;
select *,char_length(name) from record;
select *,length(name) from record;
rename table record to records;
select * from records;
alter table records add column region_id varchar(50);
select * from records;
alter table records add column region_name varchar(50) after name;
select * from records;
alter table records modify column region_id int;
select * from records;
set sql_safe_updates=0;
delete from records region_id;
select * from records;
rollback;
select * from records;
select * from customers;
alter table customers drop column country;
select * from customers;
alter table customers rename column contactname to names;
select * from customer;
select * from employees;
use 11am;
alter table employees add primary key (employee_id);
select * from employees;
alter table employees modify column employee_id int;
describe employees;
use 11am;
create user "amar"@"localhost" identified by "amar123";
grant create,delete,insert,alter on 11am.* to "amar"@"localhost";
grant select on 11am.* to "amar"@"localhost";
use 11am;
select * from superstoreorders;
alter table superstoreorders rename storedata;
select * from storedata;
select count(*) from storedata;
select count(order_date) from storedata;

use 11am;
select * from superstoreorders;
select count(*) from superstoreorders;
-- find the sales by country 
-- find the sales by region
-- find the sales by category wise , sub_category contribution
-- top 5 customers names,bottom names
-- highest selling segment,market,region,category
 use 11am;
select * from superstoreorders;
select count(*) from superstoreorders;
alter table superstoreorders rename storedata;
select * from storedata;
select country, sum(sales) from storedata group by country;
select region, sum(sales) from storedata group by region;
select category, sum(sales) from storedata group by category;
select sub_category, sum(sales) from storedata group by sub_category;
select customer_name, sum(sales) as totalsales from storedata group by customer_name order by totalsales desc limit 5;
select customer_name, sum(sales) as totalsales from storedata group by customer_name order by totalsales asc limit 5;
select segment, sum(sales) as totalsegmentsales from storedata group by segment order by totalsegmentsales desc limit 5;
select * from storedata;
select market, sum(sales) as totalsales from storedata group by market order by totalsales desc limit 5;
select market, sum(sales) as totalsales from storedata group by market order by totalsales asc limit 5;
alter table storedata drop column product_id;
select * from storedata;
alter table storedata add constraint primary key(order_id);
select ship_mode, sum(sales) as totalsales from storedata group by ship_mode order by totalsales desc limit 10;
select customer_name, count(ship_mode) as totalcount from storedata group by customer_name;
select customer_name,ship_mode, count(ship_mode) as totalcount from storedata group by customer_name,ship_mode;
select customer_name,ship_mode, count(ship_mode) as totalcount from storedata group by customer_name,ship_mode order by count(ship_mode) desc limit 10;
select customer_name,ship_mode, sum(sales) as totalsum from storedata group by customer_name,ship_mode order by sum(sales) desc limit 10;
use 11am;
select country, sum(sales) from storedata group by country order by sum(sales) desc limit 10;
use 11am;
select * from products;
select productid,productname from products;
select productname,unitprice from products order by unitprice desc;
select productname,unitprice from products order by unitprice asc;
select productid,productname,quantityperunit,unitprice from products where unitprice<20;
select productid,productname,quantityperunit,unitprice from products where (unitprice>15) and (unitprice<25);
select productid,productname,quantityperunit,unitprice from products where unitprice> (select avg(UnitPrice) from products);
select productid,productname,quantityperunit,unitprice from products order by unitprice desc limit 10;
select * from products;
select productname,unitsonorder,unitsinstock,quantityperunit from products where (unitsinstock<quantityperunit);
use 11am;
select * from employees;
select * from locations;
select * from countries;
select location_id,street_address,city,state_province,country_name from location as l inner join countries as c on l.country_id=c.country_id;
select location_id,street_address,city,state_province,country_name from location as l right join countries as c on l.country_id=c.country_id;
select location_id,street_address,city,state_province,country_name from location as l left join countries as c on l.country_id=c.country_id;
select country_id,street_address,city,state_province,country_name from location as l inner join countries as c on l.country_id=c.country_id;
select location_id,street_address,city,state_province,country_name from location as l cross join countries as c on l.country_id=c.country_id;
select * from course;
select * from trainer;
select * from course cross join trainer on course.tid=trainer.tid;
set sql_safe_updates=0;
delete from course where tid=106;
select * from course cross join trainer on course.tid=trainer.tid;
select * from cricket;
select * from course cross join cricket on course.tid=cricket.cricket_id;
select * from course cross join cricket on course.cname=cricket.name;
select * from employees;
select * from departments;
select first_name,last_name,department_name from employees as e inner join departments as d on e.department_id=d.department_id;
select * from employees cross join departments;
select * from employees as e inner join departments as d on e.department_id=d.department_id;
select * from employees inner join departments;
select e.first_name,e.last_name,d.department_name,d.department_id from employees as e inner join departments as d on e.department_id=d.department_id;
select * from departments;
select * from locations;
select d.department_name,l.city,l.location_id from departments as d inner join locations as l on d.location_id=l.location_id;
select department_name,department_id,city from departments inner join locations on departments.location_id=locations.location_id where city="seattle";
SELECT @@hostname AS ServerName;
use 11am;
select * from course;
select * from trainer;
set sql_safe_updates=0;
delete from course where tid=103;
alter table course add column trainer_name varchar(50);
select tid from trainer where tid not in (select tid from course);
SELECT @@hostname AS ServerHostname;
SHOW VARIABLES LIKE 'version%';
SHOW VARIABLES LIKE 'hostname';
use 11am;
select * from employees;
select * from trainer;
alter table trainer add column subjects varchar(50);
select * from trainer;
alter table trainer drop column subjects;
set sql_safe_updates=0;
update trainer inner join course on trainer.tid=course.tid set trainer.subjects=course.cname;
select * from trainer;
alter table trainer add column cname varchar(50);
alter table trainer rename column cname to delhi;
select * from trainer;
update trainer set delhi="city";
select * from trainer;
delete from trainer where tid=106;
select * from trainer;
rollback;
select * from trainer;
select tid,max(tid) from trainer group by tid;
create table emp (emp_id int, emp_name varchar(50), dept varchar(50), salary int);
insert into emp values(1,"ram","hr",10000),(2,"amrit","mrktg",20000),(3,"ravi","hr",30000),(4,"riya","admin",15000);
select * from emp;
select max(salary) from emp;
select salary from emp where salary<30000 order by salary desc;
select salary from emp where salary!= (select max(salary) from emp) order by salary desc ;
select emp_name,salary from emp where salary<30000 order by salary desc;
select salary from emp where salary!= (select max(salary) from emp);

use 11am;
select * from employees;
select * from departments;
select extract(month from hire_date) from employees;
select month(hire_date) as month from employees;
select monthname(hire_date), department_name as month from employees as e inner join departments as d on e.department_id=d.department_id 
group by department_name order by month desc;
SELECT department_name, MONTHNAME(MAX(hire_date)) as month FROM employees as e 
INNER JOIN departments as d ON e.department_id = d.department_id GROUP BY department_name ORDER BY month DESC;
use 11am;
select * from employees;
select sales, monthname(max(order_date)) from data group by sales order by sales desc;
create table product (order_date date , sales int);
insert into product values("2021-01-01",20) ,("2021-01-02",32), ("2021-01-03",45), ("2021-01-04",19), ("2021-01-05",10);
select * from product;
select year(order_date),extract(month from order_date) from product;
drop table product;
create table product (order_date date , sales int);
insert into product values("2021-10-01",20) ,("2021-11-02",32), ("2021-09-03",45), ("2021-08-04",19), ("2021-07-05",10);
select * from product;
select year(order_date),extract(month from order_date) from product;
select extract(month from order_date) as months, sum(sales) from product group by months;
SELECT EXTRACT(MONTH FROM order_date) as months,month(order_date), SUM(sales) AS total_sales FROM product GROUP BY MONTHS,month(order_date) order by total_sales desc;
select * from course;
set sql_safe_updates=0;
alter table course drop column trainer_name;
select * from course;
select candidate_id,cname from course where skills ("power bi", "python","sql");
select cname from course where cname in ("da","ds","gd");
use 11am;

create database music_store_data;
use 11am;
create table emp (EmpID int NOT NULL, EmpName Varchar(50),Gender varchar(20), Salary int, City Char(20));
drop table emp;
INSERT INTO Emp VALUES (1, 'Arjun', 'M', 75000,  'Pune');
insert into emp values (2, 'Ekadanta', 'M', 125000, 'Bangalore'),(3, 'Lalita', 'F', 150000 , 'Mathura'),(4, 'Madhav', 'M', 250000 , 'Delhi'),
(5, 'Visakha', 'F', 120000 , 'Mathura');
select * from emp;
create table empdetails (EmpID int NOT NULL, Project Varchar(50), EmpPosition Char(20), DOJ date  );
INSERT INTO EmpDetails VALUES (1, 'P1', 'Executive',"2019-01-26"),(2, 'P2', 'Executive', '2020-05-04'),(3, 'P1', 'Lead', '2021-10-21'),
(4, 'P3', 'Manager', '2019-11-29'),(5, 'P2', 'Manager', '2020-08-01');
select * from emp;
select * from empdetails;
select empname,salary from emp where salary<="200000" and salary<="300000";
SELECT city, COUNT(empname) as emp_count
FROM emp
GROUP BY city;
describe table emp;
-- select * from emp where emp
select * from emp;
select * from emp where empid is null;
select sum(salary) from emp;
SELECT EmpID, Salary, SUM(Salary) OVER (ORDER BY EmpID) AS CumulativeSum FROM Emp;
select sum(salary) OVER (ORDER BY EmpID) from emp;
use 11am;
SHOW VARIABLES LIKE '%version%';
SHOW VARIABLES LIKE 'hostname';
SHOW VARIABLES LIKE '%server%';
select * from employees;
select max(salary) from employees as maxemployee where salary not in (select max(salary) from employees);
select max(salary) from employees where salary<(select max(salary) from employees);
use 11am;
select * from employees;
select *, upper(first_name) as uppercasen from employees;
select sum(salary) from employees;
use 11am;
select * from employees;
select job_id,sum(salary) from employees group by job_id;
select job_id , salary from employees;
select max(salary) as maxsalary, job_id from employees group by job_id;
select count(*),job_id from employees group by job_id;
SELECT job_id, COUNT(employee_id)
FROM employees
group by job_id
HAVING COUNT(employee_id) > 1;
select count(job_id) from employees;
select job_id, count(*) 
from employees
group by job_id having count(*)>1;
select first_name from employees where 	first_name like "m%";
select first_name from employees where 	first_name like "%m%";
use 11am;
select * from employees;
SELECT *, ROW_NUMBER() OVER (ORDER BY first_name) first_name FROM employees;
-- create table employees2 (employee_id int , 
select department_id from employees where department_id<(select department_id from employees);
select distinct department_id from employees;
select * from employees;
select job_id, sum(salary) from employees group by job_id;
select job_id, count(*) from employees group by job_id having count(*)>1;
select e.employee_id inner join e.manager_id from employees where e.employee_id=e.manager_id;
use 11am;
create table salesdata (category varchar(20), avg_sales int );
insert into salesdata values("electronics",121.9),("home & kitchen" ,91),("books",88.2);
select * from salesdata;
select category from salesdata group by category having count(*)>10 order by avg_sales desc;
use 11am;
select * from employees;

select extract(month from hire_date) as month,hire_date, salary from employees group by month order by salary desc;
use 11am;
select * from salesdata;
alter table salesdata add column (`insurance provider` varchar (20));
select * from salesdata;
set sql_safe_updates=0;
update salesdata set `insurance provider`="delhi";
select * from salesdata;
select `insurance provider` from salesdata;
use 11am;
select * from employees;
select date_format(hire_date, "%Y/%m/%d") as hire_date2 from employees;
describe employees;
show databases;
create table datatype (name varchar(50), dateofbirth date);
use 11am;
show tables;
select * from empdetails;
select * from empdata;
create table emptable (empid int , empname varchar(15), gender char(1) ,salary int, city  varchar(50));
select * from emptable;
insert into emptable values (1,"arjun","m",75000,"pune"), (2,"ekadanta","m",125000,"banglore"), (3,"lalita","f",150000,"mathura"),(4,"madhav","m",100000,"delhi"),
(5,"vishaka","f",250000,"mathura");
select * from empdetails;
select * from emptable;
select empname,salary from emptable where salary between 100000 and 200000;
select empname,salary from emptable having salary<=200000;
select empname,salary from emptable where salary>=100000 and salary<=200000;
SELECT e1.empname, e1.city FROM emptable e1, emptable e2 WHERE e1.city = e2.city AND e1.empid != e2.empid;
select * from emptable where empid is null;
use 11am;
select * from employees;
SELECT department_id , SUM(salary) employee_id FROM employees GROUP BY department_id having sum(salary)>50000;
use 11am;
select * from department;
select * from emp;
alter table emp modify column empid int primary key;
ALTER TABLE departments MODIFY COLUMN empid INT, ADD FOREIGN KEY (empid) REFERENCES emp(empid);
use 11am;
select * from employees;
select distinct employee_id from employees;
delete from employees where employee_id in (select employee_id from employees group by employee_id having count(*)>1);
use 11am;
select employee_id, count(*) from employees group by employee_id having count(*)>1;
select * from trainer;
select  tid , count(*) from trainer group by tid having count(*)>1;
insert into trainer values( 102,"raja","gd","laknow");
select * from trainer;
select tid, count(*) from trainer group by tid having count(*)>1;
delete from trainer where (select tid tid, count(*) from trainer group by tid having count(*)>1);
DELETE FROM trainer WHERE tid IN (SELECT tid FROM trainer GROUP BY tid HAVING COUNT(*) > 1);
select * from trainer;
select * from course;
select * from trainer t left join course c on t.tid=c.tid;
create table employees (emp_id int primary key ,empdep int , ename varchar(10), city varchar(10), foreign key (empdep)
REFERENCES  departments(emp_id));
update employees set employee_id = 1 where employee_id=2;
select * from course;
select * from trainer;
select tid from trainer union select tid from course;
select distinct employee_id from employees;
select subjects from trainer union select cname from course;
select subjects from trainer union all select cname from course;
select tid from trainer union all select tid from course;
select * from departments;
select * from employees;
-- find the common department b/w departments and employees
select distinct department_id from departments;
select distinct department_id from employees;
select department_id from departments union select department_id from employees;
select e.department_id,d.department_name from departments as d inner join employees as e on d.department_id=e.department_id; 
-- find employees who are not assigned any department id
select employee_id from employees where department_id not in (select department_id from departments);
create table candidates (candidate_id int, voterid int, votedate date);
select * from candidates;
select candidate_id,votedate from candidates order by candidate_id desc;
drop table candidates;
select * from employees;
 
select *,extract(month from hire_date) from employees;
select *, month(hire_Date) from employees;
use 11am;
select *,extract(month from hire_date) from employees;
select *, month(hire_Date) from employees;
select first_name, monthname(hire_date) as month from employees having month="June";
select candidates,count(votes), monthname(vote_date) as month from elections group by candidates order by votes desc;

use 11am;
rename table `election dataset` to elections;
select * from elections;
select cand_name,totvotpoll from elections order by totvotpoll desc;
select cand_name,year , sum(totvotpoll) as tvote from elections group by cand_name,year order by tvote desc;
use 11am;
select * from elections;
use 11am;
select * from album2;
select * from employee;
describe table employee;
select levels,title from employee order by levels desc;
select * from invoice;
select billing_country, sum(total) as total from invoice group by billing_country order by total desc;
use 11am;
select billing_country,count(billing_country) as c from invoice group by billing_country order by c desc;
select total from invoice order by total desc limit 3;
select billing_city , sum(total) as totalsum
from invoice 
group by billing_city 
order by totalsum 
desc;
select customer_id, sum(total) as total_bill from invoice group by customer_id order by total_bill desc;
select * from customer;
select * from invoice;
select sum(i.total) as total_invoice ,c.first_name ,c.customer_id  from customer as c inner join 
invoice as i on c.customer_id=i.customer_id group by c.first_name order by  total_invoice;
-- select customer.customer_id ,customer.first_name,invoice.total, sum(invoice.total) as total_invoice
--  from customer inner join invoice on customer.customer_id=invoice.customer_id group by customer.customer_id order by total_invoice desc;
-- select customer.email,customer.first_name,customer.last_name from customer inner join genre on customer.
use 11am; 
select * from customer;
select * from genre;
select * from artist;
select * from genre where name="rock";

select * from genre;
select * from track;
select genre.name,track_id from track 
inner join genre on track.genre_id=genre.genre_id where genre.name ="rock";
select email,first_name,last_name from customer inner join invoice on customer.customer_id=invoice.customer_id
inner join invoice_line on invoice.invoice_id=invoice_line.invoice_id where track_id in(select track_id from track 
inner join genre on track.genre_id=genre.genre_id where genre.name ="rock") order by email asc;
select * from genre;
select * from artist;
use 11am;
select * from track;
select name,milliseconds from track where milliseconds >(select avg(milliseconds) as avg from track ) order by milliseconds desc;
use 11am;

select *, concat(first_name," ", last_name) as fullname from customer;
select * from invoice;
select * from customer;
select * from artist;

-- select first_name,total from invoice inner join customer on invoice.customer_id=customer.customer_id 
use 11am;
select * from trainer;
select distinct(delhi) from trainer;
select delhi from trainer group by delhi having count(*)>1;
select delhi from trainer group by delhi having count(*)>1;
use 11am;
select * from employees;
select rank() over(order by job_id) as ranking from employees;
select dense_rank() over(order by job_id) as ranking from employees;
select *, dense_rank() over(order by job_id) as ranking from employees where ranking<10;
select * from (select *, dense_rank() over(order by job_id) as ranking from employees) as ranked where ranking>10;
use 11am;
select * from employees;
set sql_safe_updates=0;
update employees set first_name="abcd" where first_name="steven";
select * from employees;
select * from trainer;
update trainer set subjects="mba" where subjects="da";
set autocommit=0;
update trainer set subjects="mmbs" where subjects="mba";
select * from trainer;
rollback;
select * from trainer;
update trainer set subjects="ba" where subjects="mmbs";
select * from trainer;
commit;
update trainer set subjects="ba" where subjects="mba";
select * from trainer;
rollback;
select * from trainer;
commit;
select * from trainer;
rollback;
select * from trainer;
show tables;
drop tables emp;
create table emp (emp_id int primary key, emp_name varchar(50), salary int);
create table dep (emp_id int, dep_id int, city varchar(50), foreign key (emp_id) references emp(emp_id));
alter table dep modify emp_id int primary key;
use 11am;
drop table dep;
select * from dep;
create table emp (emp_id int primary key, emp_name varchar(50), salary int);
drop table emp;
create table dep (dep_id int, city varchar(50), foreign key (dep_id) references emp(emp_id));
insert into emp values (1,"abc",10000),(2,"nsd",12000),(3,"bsd",14000);
insert into dep (dep_id,city) value(2,"delhi"), (3,"ahemdabad"),(4,"laknown");
select * from emp;
select * from dep;
select * from child;
create table parent(id int auto_increment ,name varchar(100),primary key(id));
insert into parent(name) value("rohit"),("aman"),("pooja"),("neha"),("komal");
select * from parent;
create table child(fid int ,val int, foreign key(fid) references parent(id));
insert into child(fid,val) value(1,103),(1,104),(2,405),(3,900),(3,999); 
select * from child;
set sql_safe_updates=0;
-- update parent set val = 1000 where val= 103;
update parent set name="abcd" where name= "rohit";
select * from parent;
update child set val = 1000 where val= 103;
select * from child;
drop table child;
drop table parent;
select * from emp;
alter table emp add city varchar(50);
select * from emp;
delete from emp city;
select * from emp;
select * from dep;
select * from cricket;
alter table cricket drop column name;
select * from cricket;
create table parent(id int auto_increment ,name varchar(100),primary key(id));
insert into parent(name) value("rohit"),("aman"),("pooja"),("neha"),("komal");
select * from parent;
create table child(fid int ,val int, foreign key(fid) references parent(id));
insert into child(fid,val) value(1,103),(1,104),(2,405),(3,900),(3,999); 
select * from parent;
select * from child;
delete from parent where id=5;
delete from parent where id=3;
delete from child where fid=1;
use 11am;
select * from invoice;
select * from invoice_line;
-- inner join
select i.invoice_id, l.track_id from invoice as i inner join invoice_line as l on i.invoice_id=l.invoice_id;
select invoice_id from invoice;
-- left join
select * from invoice as i left join invoice_line as l on i.invoice_id=l.invoice_id;
-- right join
select * from invoice as i right join invoice_line as l on i.invoice_id=l.invoice_id;
select * from invoice as i cross join invoice_line as l on i.invoice_id=l.invoice_id;
select * from products;
select * from workers;
select * from products cross join workers;
use 11am;
select * from cars;
select * from child;
select * from cars cross join child;
-- select *, customer_id, count(number_order) as placed from orders group by custtomer_id having placed>1;
-- select product_id from orders whhere product_id not in (select order_id from orders);
select * from employees;
insert into employees values(500,"abcd","nbfd","93154328453","2023-10-2","jerk",34000,0,0,301);
use 11am;
alter table employees rename employees1;
 
select * from employees1;
select distinct employee_id from employees1;
select distinct * from employees1;
delete from employees1 where (select employee_id, count(*) as count group by employee_id having count>1);
use 11am;
delete from employees1 where employee_id not in (select min(employee_id) from employees1 group by employee_id);
DELETE FROM employees1 WHERE employee_id NOT IN (SELECT min(employee_id) FROM employees1 GROUP BY employee_id);
select * from employees1 limit 5;
delete from employees1 where employee_id not in (select max(employee_id) from employees1);
select count(*) from employees1;
select employee_id,first_name,last_name, max(salary) as maxsalary from employees1 group by employee_id,first_name,last_name
order by maxsalary desc limit 5;
select employee_id, max(salary) as maxsalary from employees1 group by employee_id
order by maxsalary desc limit 3;
select *,dense_rank() over(order by salary desc) as ranks from employees1 limit 5;
select * , rank() over (order by salary desc) as ranks from employees1 limit 5;
select * from sessions inner join users on session.column_name=user.column_name;
use 11am;
select * from employees1;
select monthname(hire_date) as months,salary  from employees1 group by months,salary order by salary desc;
use 11am;
SHOW TABLES;
select count(skills) as countskills, candidate_id group by candidate_id having countskills>1;
select * from employees1;
select employee_id,salary from employees1 group by employee_id,salary order by salary asc limit 5;
select employee_id,salary from employees1 group by employee_id, salary order by salary desc limit 5;
use 11am;
select * from employees1;
rename table employees1 to employees;
select * from employees;
use 11am;
select * from employees;
select * from exportsales;
select count(*) from exportsales;
use 11am;
select * from exportsales;
select id,category from exportsales where category=category5;
select id,category from exportsales group by category,id order by category asc;
select monthname(date) from exportsales;
use 11am;
select * from employees;
select employee_id,salary from employees group by employee_id, salary order by salary desc limit 5;
select max(salary) from employees;
select max(salary) from employees where salary<(select max(salary) from employees); 
select distinct salary from employees;
select salary,dense_rank() over (order by salary desc) from employees;
select distinct(salary) from employees;
select employee_id,count(2) from employees group by employee_id;
select employee_id,count(*) from employees group by employee_id;
select employee_id,count(*) from employees;
use 11am;
select current_date();
select current_time();
select adddate(2);
select * from employees;
select adddate(2) hire_date from employees;
select adddate("2008-01-02",interval 31 day);
select addtime("10:10:00");
create table dates(name varchar(100),doj date);
select * from dates;
alter table dates drop column today;
select * from dates;
alter table dates add column today date;
select * from dates;
set sql_safe_updates=0;
update dates set today = current_date();
select * from dates;
select year(doj),month(doj),day(doj) from dates;
select * from dates;
select extract(year from doj) from dates;
select *, extract(month from doj) from dates;
select *, extract(month from doj), extract(year from doj) from dates;
select monthname(doj) from dates;
select * , monthname(doj), dayname(doj) from dates;
select week(doj) from dates;
select weekname(doj) from dates;
select year(doj) from dates;
select *, year(doj), yearweek(doj), month(doj), week(doj), weekday(doj), weekofyear(doj) from dates;
select *, adddate(doj, interval 10 day) from dates;
select * , adddate(doj, interval 2 month) from dates;
select *, adddate(doj, interval 2 year) from dates;
show tables;
select *,today-doj from dates;
select *, doj-today from dates;
describe dates;
select CONVERT_TZ(doj, '+00:00', '+03:00') from dates;
select CONVERT_TZ(doj, '+00:00', '+03:10') from dates;
select now();
select*,datediff(today,doj) from dates;
select*,round(datediff(today,doj)/365,0) as yeardiff from dates;
select *, today-doj from dates;
select *, round(datediff(today,doj)/30,0) as monthdiff from dates;
select *, round(month(datediff(today,doj)),0) from dates;
select round(datediff(today,doj)/30,0) from dates;
select * from times;
select subtime(ot, "0:30") from times;
alter table times add column now time;
select * from times;
update times set now = now();
select * from times;
select now();
select current_time();
select * from employees;
select distinct salary from employees;
select distinct manager_id from employees;
select * from employees where salary<> 20000;
select * from  employees order by first_name desc;
select * from  employees order by first_name,last_name;
use 11am;
select * from parent;
select * from child;
select * from invoice;
select * from invoice_line;
alter table invoice_line drop column invoice_id;
select * from employees;
select * from employees order by job_id asc;
select * from employees order by job_id desc;
select * from employees order by first_name, last_name;
select * from employees where job_id= "st_man" and salary="8200";
select * from employees where first_name ="adam" or last_name ="fripp";
select * from employees where not job_id ="sap_rep";
select * from employees where job_id!= "sa_rep";
describe employees;
select count(*) from employees;
select * from employees where employee_id is null;
select * from employees where employee_id is not null;
set sql_safe_updates=0;
update employees set first_name ="hirankashyap",salary = 25000 where employee_id = 100;
select * from employees;
select * from new;
drop table new;
select * from ndata;
select *, extract(year from `date/time`) from ndata;
select *, extract(month from `date/time`) from ndata;
rollback;
select * from product;
delete from product where sales = 20;
select * from product;
truncate product;
select * from product;
rollback;
delete from product;
select * from products;
delete from products;
select * from products;
select * from employees;
select *, min(salary),first_name from employees;
use 11am;
select * from employees;
-- we have to count the number of employee having managerid 
select count(manager_id) from employees;
select count(employee_id) from employees;
select count(employee_id) as counts from employees having counts;
select count(*) as employee_count from employees where manager_id = employee_id;
select count(employee_id) from employees where manager_id is not null;
select * from child;
alter table child add constraint val check (val>900);
alter table child add constraint check (fid is not null);
alter table child modify val int not null;
delete from child where fid=3;
rollback;
set sql_safe_updates=0;
delete from child where fid=fid;
select * from child;
select * from employees;
select * from employees where not employee_id =100; 
use 11am;
select * from employees;
select * from employees where first_name in ("neena", "bruce");
select * from employees where first_name not in ("neena", "bruce");
select * from employees where salary between 20000 and 50000;
select * from employees where salary >20000;
select * from employees where salary not between 20000 and 50000;
use 11am;
select * from employees;
select * from employees where first_name="neena";
select * from customers;
select distinct * from customers;
select distinct salary from employees;
set sql_safe_updates=0;
update employees set first_name = "ram" where first_name ="neena";
select * from employees;
select month(hire_date) as month from employees where month=2010;
select count(*) as total from employees;
select count(*) as total from employees where month(hire_date)=7;
use 11am;
select * from employees;
select distinct year(hire_date) as year from employees order by year asc;
select first_name from employees group by first_name having count(first_name)>1;
select first_name , count(first_name)  as counts from employees group by first_name having counts>1;
select *, first_name from employees where first_name ="David";
select first_name from employees order by length(first_name) desc;
select length(first_name) from employees;
select *, length(first_name) from employees order by length(first_name) desc;
SELECT first_name FROM patients order by len(first_name),first_name;
use 11am;
select first_name from employees group by first_name having count(first_name)=1;
use 11am;
select * from employees;
select sum(last_name) from employees;
select count(last_name) from employees;
select * from products;
drop table products;
select * from storedata;
select (select count(*) from employees where ship_mode="standard class") as counsta;
-- (select count(*) from employees where ship_mode="same day" )as sameday;
SELECT (SELECT COUNT(*) FROM employees WHERE ship_mode = "standard class") AS counsta;
use 11am;
select first_name,last_name,job_id from employees where job_id="it_prog" 
or "ad_pres";
select * from employees;
select first_name,last_name,job_id from employees having job_id="it_prog";
SELECT first_name, last_name,job_id FROM employees WHERE job_id IN ("it_prog","ad_vp") order by job_id,first_name,last_name;
select * from customers;
select names from customers where names in ("maria anders");
select * from payment;
select customer_id,amount, mode from payment where mode in ("cash","credit card");
select customer_id,amount, mode from payment where mode in ("cash","credit card") order by customer_id,amount,mode asc;
select customer_id,amount, mode from payment where mode = "cash";
select customer_id, mode from payment where mode="credit card" order by customer_id desc;
select * from payment where customer_id = 3;
select * from payment where customer_id in (3,2);
select * from storedata;
select ship_mode,region from storedata group by ship_mode,region having count(*)>1;
select region from storedata group by region having count(*)>1;
select *, region from storedata group by region having count(*)>1;
select count(state) from storedata order by order_id desc;
select count(state) from storedata;
select state,count(*) from storedata order by order_id desc;
select state, count(order_id) from storedata group by state;
select state, count(order_id) as idcount from storedata group by state order by idcount desc;
select state, count(order_id) as idcount from storedata group by state order by state asc;
select state, count(order_id) as idcount from storedata group by state order by idcount desc,state asc;
select state, count(order_id) as idcount from storedata group by state order by state asc,idcount desc;
select state, count(*) as idcount from storedata group by state order by state asc,idcount desc;
select * from empdetails;
select * from employee;
create view new as select empid from empdetails;
alter table empdetails add column city varchar(50);
create view new as select empid,empposition from empdetails;
select * from new;
create table new_table as select * from empdata;
select * from new_table;
select * from empdata;
create view new_table1 as select empid,empname from empdata;
select * from new_table1;
alter table new_table1 add column city varchar(40);
alter table new_table add column city varchar(40);
select * from new_table;
use 11am;
select * from storedata;
select state, count(state) as count from storedata where state is not null group by state order by count desc;
select state, count(*) as count from storedata group by state order by count desc;
select state from storedata group by state having count(*)>1;
select state, count(*) as counts from storedata group by state having counts>1 order by counts desc;
select state, count(*) as counts from storedata group by state where counts>1 order by counts desc;
select * from storedata;
select ship_mode, customer_name,order_date, month(order_date) as months from storedata order by months;
select month(order_date) from storedata;
select extract(month from order_date) as month from storedata;
select * from dates;
select extract(month from doj) as month from dates;
select * from employee;
select extract(month from hire_date) as month from employee;
select month(hire_date) from employee;
select * from exportsales;
select month(date) as month from exportsales;
select extract(month from date) as month from exportsales;
select monthname(date) as monthname from exportsales order by monthname desc; 
select date, year(date) as years from exportsales group by date having years = 2019 order by years;
select year(date) as years from exportsales having years = 2019;
select * from employee;
select concat(upper(first_name),",",lower(last_name)) as fullname from employee;
select concat(first_name,",",last_name) from employee;
select concat(upper(first_name),",",lower(last_name)) as fullname from employee order by first_name desc;
use 11am;
create table parents(id int auto_increment ,rollno int ,name varchar(100),primary key(id));
select * from parent;
describe parent;
insert into parents(name) value("rohit"),("aman"),("pooja"),("neha"),("komal");
select * from parent;
create table childs(fid int ,rollno int, val int, foreign key(fid) references parents(id),foreign key(rollno) references parents(id));
select * from childs;
-- multiple foreign keys can be difned but multiple parents key cannot be define hence proved!
use 11am;
select * from employees;
select * from employees where job_id="it_prog";
select * from storedata;
rename table storedata to store;
select * from store;
select * from store where order_priority="high";
drop table employees;
select * from store where order_priority like "h%";
select * from store where order_priority like "h";
select order_priority from store where order_priority like "%h%";
select * from store;
select ship_mode from store where ship_mode="standard class";
select ship_mode in (select ship_mode="standard class" from store);
select ship_mode="standard class" in (select ship_mode from store);
select * from store;
set sql_safe_updates=0;
update store set sales = 00 where sales = 408;
update store set sales=408 where sales in (select sales from store where sales=00);
UPDATE store
SET sales = 408
WHERE sales IN (SELECT sales FROM store WHERE sales = 0);
delete from store where sales = 00;  -- to delete rows
select * from data;
delete from data city;
ALTER TABLE course DROP COLUMN cname; -- to delete column
select * from store;
create view newstore as select * from store where segment ="consumer";
select * from newstore;
alter table newstore drop column region;
delete from store where sales =120;
show  tables;
use 11am;
select * from store;
select order_id,ssales, sum(sales) as sumsales from store;
use 11am;
select order_id,sales, sum(sales) as sumsales from store;
select sales from store;
select sales from store where sales>900;

select order_id,sales,sum(sales) as sum_sales from store group by order_id,sales having sum_sales>=1000 order by sum_sales desc;
select * from store;
use 11am;
select * from store;
select max(sales) from store;
select min(sales) from store;
select max(sales) or min(sales) from store;
select min(sales) or max(sales) from store;
select max(sales) or min(profit) from store;
select max(sales) -min(sales) as differnnce from store where customer_name="Annie Thurman";
select * from store;
select day(order_date) from store;
select extract(day from order_date) from store;
select datediff(now(),order_date) as daysdiff from store;
select * from employee;
select datediff(now(),hire_date) as daysdiff from employee;
select extract(day from hire_date) from employee;
SELECT
  DAY(hire_date) AS day_number,
  COUNT(*) AS number_of_hiredate
FROM employee
GROUP BY day_number
ORDER BY number_of_hiredate DESC;
select day(hire_date) from employee;
select count(*) from employee;
select count(hire_date) from employee;
select month(hire_date) from employee;
select month(order_date) from store;
select month(doj) from dates;
select day(doj) from dates;
select * from store;
select * from store where order_id="hu-2011-1220";
select * from store where order_id="hu-2011-1220" order by order_date limit 1;
-- SELECT patient_id, attending_doctor_id,diagnosis FROM admissions WHERE (attending_doctor_id IN (1, 5, 19) AND patient_id % 2 != 0)
-- OR ( attending_doctor_id LIKE '%2%' AND len(patient_id) = 3)
use 11am;
select * from store;
select customer_name, sales from store group by customer_name, sales;
select customer_name , avg(sales) from store group by customer_name;
select customer_name , avg(sales) from store group by customer_name having avg(sales)> (select sales from store);
select avg(sales) from store;
select * from store where sales > 160;
select * from store where sales > 1000;
select * from store where sales > (select avg(sales) from store);
select customer_name from store where sales > (select avg(sales) from store);
select customer_name,sales from store where sales> (select avg(sales) from store) order by sales desc;
select customer_name,sales from store group by customer_name,sales having sales>(select avg(sales)  from store);
select customer_name,sales 
from store group by customer_name,sales 
having sales>(
select avg(sales)  
from store)
order by sales desc limit 10;
select * from trainer;
select * from course;
select * from course where tid in (select tid from trainer);
select * from trainer where tid in (select tid from course);
 
use 11am;
select * from store;
select * from store where order_id = "IR-2011-770";
select customer_name from store where sales > (select sales from store where order_id = "IR-2011-770");
select customer_name from store;
select sales from store where order_id = "IR-2011-770";
select customer_name,sales from store where order_id = "IR-2011-770";
select customer_name from store where sales >(select sales from store where order_id = "IR-2011-770");
select order_id, SEGMENT from store where order_id = "IR-2011-770";
select * from store;
select order_id, SEGMENT from store where order_id = "IR-2011-770" ;
select customer_name, order_date,segment from store where order_id =( select order_id from store where order_id = "IR-2011-770");
select customer_name, order_date,segment from store;
select order_id from store where order_id = "IR-2011-770";
select customer_name, order_date,segment from store where order_id = (select order_id from store where order_id = "IR-2011-770");
select min(sales ) as minsales from store;
select * from store;
select sales,segment from store;
select min(sales ) as minsales, segment from store group by segment;
select order_id,customer_name,segment from store;
select min(sales ) as minsales,order_id from store group by order_id;
select order_id,customer_name,segment from store 
where sales in (
select min(sales ) as minsales from store group by order_id);
select order_id,customer_name from store where sales in (select avg(sales) from store group by order_id);
select order_id,customer_name from store where sales > (select avg(sales) from store);
select * from store;
select order_id,customer_name,sales from store where order_id in (
select order_id from store where segment = "consumenr");
select customer_name,state from store where state =" New South Wales";
select * from invoice;
select * from invoice_line;
-- select customer_id,billing_city , billing_state from invoice where invoice_id= "5"
-- union 
-- (select invoice_line_id , track_id from invoice_line where invoice_id = "5";
SELECT customer_id, billing_city, billing_state 
FROM invoice 
WHERE invoice_id = "5"
UNION 
SELECT invoice_id, track_id 
FROM invoice_line 
WHERE invoice_id = "5";
alter table invoice_line rename column invoice_line_id to invoice_id;
select salesperson, city from salesman union (select salesman_id,city from salesman);
select invoice_id, track_id from invoice_line;
select customer_id, billing_city from invoice;
select invoice_id, track_id from invoice_line union (select customer_id, billing_city from invoice);
use 11am;
select * from child;
drop table child;
select * from parent;
drop table parent;
show tables;
select * from course;
select * from trainer;
select tid from course union select tid from trainer;
select tid from course union all select tid from trainer;
select tid from course where tid= 102 union select tid from trainer where tid= 102;
select * from emptable;
select * from empdetails;
alter table empdetails drop column city;
use 11am;

select * from product;
select * from sales;
select productid from product union select productid from sales;
select productid from product union all select productid from sales;
select productid from product where productid = "p005" union select productid from sales where productid = "p005" order by productid;
select * from product where productid = "p005" union select * from sales where productid = "p005" order by productid;
use 11am;
select * from product;
select * from sales;
select * from product union all select * from sales;
-- union is used to find the unique values from two table & union all is used to find the duplicate values from two tables.
select * from sales union all select * from product;
select * from sales union select * from product;
insert into sales values (category(drinks), name(product2), size(large), price(100));
insert into product (category, name, size, price) values ("drinks","product2","large","100");
select * from product;
delete from product where price = 100;
set sql_safe_updates=0;
select ifnull();
use 11am;
select * from cars;
drop table cars;
select * from cars;
select cars,price from cars group by cars,price;
alter table cars rename column cars to cars1;
select * from cars;
select cars1 from cars group by cars1;
select sum(price ) from cars;
select price from cars;
select cars1,price from cars where cars1 in (select cars1 from cars group by cars1);
select cars1 from cars where cars1 in (select cars1 from cars group by cars1);
select cars1 from cars where cars1="BMW" group by cars1;
select cars1 from cars group by cars1;

rename table cars to bikes;
select sum(price), cars1 from bikes group by cars1;
use 11am;
select * from bikes;
select year,sum(price) as prices from bikes group by year order by prices desc;
select year,count(cars1) as cars from bikes group by year order by cars asc;
select color,sum(price) from bikes group by color ;
select color from bikes group by color;
-- select owner from bikes  not in (select sum(price),color from bikes group by color);
select owner from bikes group by owner having sum(price) is null or color is null;
select 50+50;
select 50-50;
select 50*50;
select * from bikes;
select * from bikes where price > all (select price from bikes where price>"40000");
select * from bikes where color ="white" and cars1="bmw";
select * from empdata;
select empsalary from empdata where empsalary>"45000";
select * from empdata where empid in ("emp","emp2");
use 11am;
select * from cricket;
alter table cricket add constraint primary key (cricket_id);
select * from countries;
alter table countries add constraint primary key (country_id);
use 11am;
select * from elections;
alter table countries add constraint primary key (country_id);
select * from invoice;
alter table invoice add constraint primary key (invoice_id);
alter table invoice modify invoice_date datetime;
create view view1 as select customer_id, billing_address from invoice;
select * from view1;
set sql_safe_updates=0;

delete from view1 where customer_id=18;
select * from view1;
select * from invoice;
select avg(total) from invoice;
select invoice_id from invoice where total> (select avg(total) from invoice);
select count(distinct invoice_id) from invoice;
select distinct(invoice_id) from invoice;
use 11am;
select * from artist;
select char_length("accept") from artist;
select character_length("accept") from artist;
select format("artist_id") from artist;
select * from dates;
select format(doj,"YYYY-MMM-DDD") from dates;
select reverse("accept") from artist;
select ifnull(null,"accept");
select isnull("accept") from artist;
select isnull() from dates;
use 11am;
select * from employee;
select max(salary) from employee;
select * from empdata;
select max(empsalary) from empdata;
select empid , empname , max(empsalary) from empdata group by empid,empname;
select empid , empname , max(empsalary) from empdata group by empid,empname order by max(empsalary) limit 5;
select empid , empname from empdata where empid = "emp1";
select empid,empname ,max(empsalary) from empdata where empid = "emp1" group by empid,empname;
select empname,empid ,max(empsalary) as max_salary from empdata where empid= "emp1" group by empid,empname;
use 11am;
select * from employee;
select * from department;
select e.first_name,e.last_name,d.empid,d.name from employee as e join department as d on e.employee_id=d.empid where d.empid=
(select e.employee_id from employee where e.empid=1);
select first_name , last_name,title, employee_id from employee where employee_id =(select employee_id from employee where employee_id =1);
select min(reports_to),last_name , employee_id from employee group by last_name , employee_id ;
select last_name , employee_id from employee where employee_id in (select min(reports_to) from employee group by employee_id);
select * from employee;
select employee_id from employee where employee_id > any (select empid from department);
select empid from department;
select employee_id from employee where employee_id = any (select empid from department);
use 11am;
select * from employee;
select employee_id from employee where employee_id = any (select empid from department);
select employee_id from employee where employee_id > any (select empid from department);
select * from employee where employee_id=10;
select * from employee where employee_id= some (select sum(employee_id) from employee);
select employee_id from employee where employee_id not in (select empid from department);
show tables;
select * from album2;
select * from artist;
select count(artist_id) from album2;
select count(artist_id) from artist;
set sql_safe_updates=0;
delete from album2 where artist_id = 22;
delete from album2 where artist_id >144;
delete from artist where artist_id >144;
select * from employee where employee_id = 3 and title= "sales manager";
select * from album2;
rename table album2 to album;
select * from album;
select * from album where album_id = 5 and title = "big ones";
select * from album where album_id = 3 or title = "big ones";
select * from album where not album_id =3;
select * from childs;
drop table childs;
select * from data;
drop table data;
select * from datatype;
drop table datatype;
select * from department;
select * from department where not name = "hr";
select * from department where name = "it" or name ="mrktg";
select * from department where name in ("hr","it","mrktg");
-- select * from department where name = "it" or name ="mrktg" or name "hr";
select * from department where deptno between "d1" and "d3";
use dbms_db1;
show tables;
show databases;
create table dbms_db1.newtable like 11am.employee;
select * from newtable;
insert into dbms_db1.newtable select * from 11am.employee;
create table dbms_db1.department like 11am.department;
insert into dbms_db1.department select * from 11am.department;
select * from department;
create trigger new_trigger before insert on department for each row begin 
end;
select * from new_trigger;
use 11am;
select * from employee;
select * from newtable;
use dbms_db1;
rename table newtable to employees;
select * from employees;
create table employee_backup like employees;
select * from employee_backup;
insert into employee_backup select * from employees;
select * from department;
create table department_backup like department;
insert into department_backup select * from department;
select * from department_backup;
set sql_safe_updates=0;
delete from department where deptno="d1";
truncate department;
drop table department;
create table departments like department_backup;
insert into departments select * from department_backup;
select * from departments;
create view departments_backup as select * from departments;
select * from departments_backup;
rollback;
delete from departments_backup where deptno="d1";
create database henry1;
drop database henry1;
select * from employees;
select * from employee_backup;
drop table employee_backup;
create table employee_backup like employees;
select * from employees;
select * from employee_backup;
create trigger trigger1
before delete on employees 
for each row 
begin
end;
drop table employee_backup;
delete from employees where employee_id =1;
select * from employees;
select * from trigger1;
-- CREATE TRIGGER trigger2
-- BEFORE DELETE ON employees 
-- FOR EACH ROW 
-- BEGIN
--     INSERT INTO backup values (new.*);
-- END;
select * from employees limit 5;
select * from employees where employee_id =5;
use 11am;
select * from employee;
select * from employee where employee_id=1;
select title,sum(reports_to) from employee group by title;
select first_name,title,sum(reports_to) from employee group by title,first_name;
select * from invoice;
select billing_country , sum(invoice_id) from invoice group by billing_country;
select * from sales;
select * from trainer;
select * from student;
select * from department;
select * from dup;
alter table dup add constraint foreign key (id) references department(empid);
select * from artist;
select * from album;
select count(artist_id ) from album;
select count(artist_id ) from artist;
alter table artist add foreign key (artist_id) references album (artist_id);
alter table dup add constraint forgein_kry foreign key (id) references department(empid);
select * from dup;
create table dup1 like dup;
insert into dup1  select * from dup;
select * from dup1;
alter table dup1 add foreign key (id) references dup (id);
select * from dup1;
select * from dup;
delete from dup  where id =5;  -- cannot delete or update parent row
insert into dup values (6, "rishi","9315431839");
delete from dup1 where id =5;
delete from dup  where id =4;
insert into dup values (7, "rishi","9315431839");
insert into dup1 values (7, "rishi","9315431839");
delete from dup1 where id=1;
alter table dup1 drop foreign key id;
select * from employee;
select * from employee where reports_to = (select max(reports_to) from employee);
select max(reports_to) from employee;
select max(reports_to) as max from employee group by first_name order by max desc;
select reports_to from employee where reports_to  <> (select max(reports_to) from employee);
select reports_to from employee where reports_to  <> (select min(reports_to) from employee);
select max(reports_to) from employee where reports_to  <> (select max(reports_to) from employee);
select first_name from employee where reports_to in (select reports_to from employee where reports_to  <> (select max(reports_to) from employee));
use 11am;
select * from trainer;
use 11am;
select * from bikes;
select cars1 from bikes group by cars1;
select cars1,price from bikes group by cars1,price;
select price from bikes where price in (select distinct cars1 from bikes);
select cars1 from bikes group by cars1;
select cars1,sum(price) from bikes group by cars1;
select cars1, avg(price) from bikes group by cars1;
select cars1,sum(price) from bikes group by cars1 order by sum(price) desc;
use 11am;
select * from bikes;
select avg(price) as avgprice from bikes where cars1="bmw";
select * from emp;
drop table emp;
select * from dup;
drop table dup;
select * from exportsales;
select category, avg(`total price`) as avgprice from exportsales where date>"2019-10-02" group by category having count(*)>10 order by avgprice desc limit 5;
 
select `total price`, month(date) from exportsales;
select sum(`total price`) as price, month(date) as months from exportsales group by months order by months asc;
select sum(`total price`) as price, year(date) as year ,month(date) as months from exportsales group by months,year order by months asc;
select * from exportsales where category in (select "category2","category5","category7" from exportsales);
select * from exportsales where category ="category2";
select category from exportsales where category in ("category2","category5","category7");
select * from exportsales where category in ("category2","category5","category7");
select category,count(*) from exportsales where category in ("category2","category5","category7") group by category;
select count(*) from exportsales;
select category, count(*) from exportsales where category in ("category2","category5","category7") group by category;
select category, count(*) from exportsales where category in ("category2","category5","category7") group by category having count(*)>10 order by id desc;
use 11am;
select * from  exportsales;
select category , count(*) from exportsales where category in ("category2","category5","category7") group by category having count(*)>3;
select category , count(*) from exportsales where category in ("category2","category5","category7") group by category 
having count(*)>3 order by category desc;
select tables from 11am;
show tables;
use 11am;
show tables;
select * from departments;
drop table customers;



